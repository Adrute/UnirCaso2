---
# tasks file for configuracion_kubAll
#
# Los siguientes comandos son añadidos para probar si funciona calico en Azure
#    firewall-cmd --permanent --add-port=8285/udp
#    firewall-cmd --permanent --add-port=8472/udp
#
#
- name: Activamos transparent masquerading para que los PODs puedan comunicarse dentro del cluster mediante VXLAN
  shell: |
    modprobe br_netfilter
    firewall-cmd --add-masquerade --permanent
    firewall-cmd --permanent --add-port=8285/udp
    firewall-cmd --permanent --add-port=8472/udp
    firewall-cmd --reload

- name: Permitir que kubernetes maneje correctamente el tráfico con el cortafuegos
  lineinfile:
      path: /etc/sysctl.d/k8s.conf
      line: "{{item}}"
      state: present
      backup: yes
      create: yes
  with_items:
     - 'net.bridge.bridge-nf-call-ip6tables = 1'
     - 'net.bridge.bridge-nf-call-iptables = 1'
    
- name: sysctl --system
  shell: |
    sysctl --system

# Instalamos docker que será el engine para ejecutar contenedores:

- name: Añadimos el repositorio
  shell: |
    dnf config-manager --add-repo={{ dockerRepo }}

- name: Instalamos "docker-ce-19.03.14-3.el8" & "containerd.io"
  dnf:
    name: ["docker-ce-19.03.14-3.el8", "containerd.io"]
    state: present

- name: Habilitamos docker
  service:
    name: 'docker'
    enabled: yes

- name: Arrancamos docker
  service:
    name: 'docker'
    state: started

# Kubernetes
- name: Configuracion repositorio kubernetes
  lineinfile:
      path: /etc/yum.repos.d/kubernetes.repo
      line: "{{item}}"
      state: present
      backup: yes
      create: yes
  with_items:
     - "[kubernetes]"
     - "name=Kubernetes"
     - "baseurl={{ kubBaseUrl }}"
     - "enabled=1"
     - "gpgcheck=1"
     - "repo_gpgcheck=1"
     - "gpgkey={{ kubGpgKey }}"
     - "exclude=kubelet kubeadm kubectl"

- name: Instalamos Kubernetes
  dnf:
      name: ['kubelet','kubeadm','kubectl']
      state: present
      disable_excludes : kubernetes

- name: Habilitamos kubelet
  service:
    name: 'kubelet'
    enabled: yes

- name: Arrancamos kubelet
  service:
    name: 'kubelet'
    state: started  